apply plugin: 'com.android.application'
// This does not break the build when Android Studio is missing the JRebel for Android plugin.
apply plugin: 'com.zeroturnaround.jrebel.android'
apply plugin: 'io.fabric'
apply plugin: 'org.robolectric'

dependencies {

    compile 'com.google.android.gms:play-services-analytics:7.3.0'
    compile 'com.google.android.gms:play-services-location:7.3.0'

    compile 'com.android.support:support-v4:22.1.1'
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.2'

    compile files('libs/j2xx.jar')
    compile files('libs/jeromq-0.3.4.jar')
    compile files('libs/droneapi-java.jar')
    compile files('libs/protobuf-java-2.5.0.jar')

    compile project(':ClientLib')
    compile project(':dependencyLibs:usb-serial-for-android:UsbSerialLibrary')
    compile('com.crashlytics.sdk.android:crashlytics:2.2.2@aar') {
        transitive = true;
    }

    compile 'com.jakewharton.timber:timber:3.1.0'
    compile 'com.jcraft:jsch:0.1.51'

    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.3.0'

    //Java semver library
    compile 'com.github.zafarkhaja:java-semver:0.9.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:2.4'
}

//Decomposed version name and code (https://plus.google.com/+JakeWharton/posts/6f5TcVPRZij)
def versionMajor = 1
def versionMinor = 4
def versionPatch = 2
def versionBuild = 1 //bump for dogfood builds, public betas, etc.
def versionPrefix = "3DR Services v"

//Log levels values
def logLevelVerbose = 2;
def logLevelDebug = 3;
def logLevelInfo = 4;
def logLevelWarn = 5;
def logLevelError = 6;
def logLevelAssert = 7;

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId 'org.droidplanner.services.android'
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        buildConfigField "boolean", "SITL_DEBUG", "false"
        buildConfigField "String", "SOLO_LINK_LOCAL_IP" , getLocalIp()

        versionCode computeVersionCode(versionMajor, versionMinor, versionPatch, versionBuild)
        versionName generateVersionName(versionPrefix, versionMajor, versionMinor, versionPatch)

        //Write logs to file preferences
        buildConfigField "boolean", "WRITE_LOG_FILE", "false"
        buildConfigField "int", "LOG_FILE_LEVEL", "$logLevelDebug"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        test {
            java.srcDirs = ['test/java']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        release {
            storeFile getAppKeystoreFile()
            storePassword getAppKeystorePassword()
            keyAlias getAppKey()
            keyPassword getAppKeyPassword()
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            if (file != null && file.name.endsWith('.apk')) {
                def buildType = variant.buildType.getName()
                def versionCode = defaultConfig.versionCode
                output.outputFile = new File(file.parent, "3dr-services-${buildType}.${versionCode}.apk")
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix generateVersionNameSuffix(versionBuild, "dev")
            buildConfigField "boolean", "WRITE_LOG_FILE", "true"
        }

        beta {
            signingConfig signingConfigs.release
            versionNameSuffix generateVersionNameSuffix(versionBuild, "beta")
            buildConfigField "boolean", "WRITE_LOG_FILE", "true"
            debuggable true
        }

        sitl {
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "SITL_DEBUG", "true"
            buildConfigField "boolean", "WRITE_LOG_FILE", "true"
            debuggable true
        }

        release {
            signingConfig signingConfigs.release
        }
    }

    //FIXME: Remove when lint errors are taken care of.
    lintOptions {
        abortOnError false
    }
}

def getAppKeystoreFile() {
    def filePath = hasProperty('COM_O3DR_SERVICES_KEYSTORE') ? COM_O3DR_SERVICES_KEYSTORE : null
    return filePath ? file(filePath) : null
}

def getAppKeystorePassword(){
    return hasProperty('COM_O3DR_SERVICES_KEYSTORE_PWD') ? COM_O3DR_SERVICES_KEYSTORE_PWD : ''
}

def getAppKeyPassword() {
    return hasProperty('COM_O3DR_SERVICES_KEY_PWD') ? COM_O3DR_SERVICES_KEY_PWD : ''
}

def getAppKey() {
    return hasProperty('COM_O3DR_SERVICES_KEY_ALIAS') ? COM_O3DR_SERVICES_KEY_ALIAS : ''
}

def getLocalIp() {
    return '\"' + InetAddress.getLocalHost().getCanonicalHostName() +'\"'
}
